// schema.prisma

generator client {
  provider = "prisma-client-js"
}

// ---------------------
// DATASOURCES
// ---------------------

datasource db {
  provider = "sqlite" // Later you can switch to "postgresql"
  url      = "file:./dev.db"
}

// ---------------------
// MODELS
// ---------------------

// Users of the system (Admin, Player)
model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String // hashed password
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  results Result[]
  Quiz    Quiz[]
}

// Quiz entity (created by Admin)
model Quiz {
  id          String   @id @default(uuid())
  title       String
  description String?
  createdBy   String
  createdAt   DateTime @default(now())

  author    User       @relation(fields: [createdBy], references: [id])
  questions Question[]
  results   Result[]
}

// Each question belongs to a quiz
model Question {
  id     String       @id @default(uuid())
  text   String
  type   QuestionType @default(MCQ) // multiple types if you want
  quizId String

  quiz    Quiz     @relation(fields: [quizId], references: [id])
  options Option[]
}

// Answer choices for each question
model Option {
  id         Int     @id @default(autoincrement())
  text       String
  isCorrect  Boolean @default(false)
  questionId String

  question Question @relation(fields: [questionId], references: [id])
}

// Stores each userâ€™s quiz attempt
model Result {
  id      String   @id @default(uuid())
  score   Int
  userId  String
  quizId  String
  takenAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  quiz Quiz @relation(fields: [quizId], references: [id])
}

// ---------------------
// ENUMS
// ---------------------

// User role (admin can create quizzes, users can attempt)
enum Role {
  ADMIN
  USER
}

// Question type
enum QuestionType {
  MCQ
  TRUE_FALSE
  FILL_BLANK
}
